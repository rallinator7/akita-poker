// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hand

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HandServerClient is the client API for HandServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HandServerClient interface {
	CheckHand(ctx context.Context, in *CheckHandRequest, opts ...grpc.CallOption) (*CheckHandResponse, error)
}

type handServerClient struct {
	cc grpc.ClientConnInterface
}

func NewHandServerClient(cc grpc.ClientConnInterface) HandServerClient {
	return &handServerClient{cc}
}

func (c *handServerClient) CheckHand(ctx context.Context, in *CheckHandRequest, opts ...grpc.CallOption) (*CheckHandResponse, error) {
	out := new(CheckHandResponse)
	err := c.cc.Invoke(ctx, "/grpc.HandServer/CheckHand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandServerServer is the server API for HandServer service.
// All implementations must embed UnimplementedHandServerServer
// for forward compatibility
type HandServerServer interface {
	CheckHand(context.Context, *CheckHandRequest) (*CheckHandResponse, error)
	mustEmbedUnimplementedHandServerServer()
}

// UnimplementedHandServerServer must be embedded to have forward compatible implementations.
type UnimplementedHandServerServer struct {
}

func (UnimplementedHandServerServer) CheckHand(context.Context, *CheckHandRequest) (*CheckHandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHand not implemented")
}
func (UnimplementedHandServerServer) mustEmbedUnimplementedHandServerServer() {}

// UnsafeHandServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HandServerServer will
// result in compilation errors.
type UnsafeHandServerServer interface {
	mustEmbedUnimplementedHandServerServer()
}

func RegisterHandServerServer(s grpc.ServiceRegistrar, srv HandServerServer) {
	s.RegisterService(&HandServer_ServiceDesc, srv)
}

func _HandServer_CheckHand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandServerServer).CheckHand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.HandServer/CheckHand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandServerServer).CheckHand(ctx, req.(*CheckHandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HandServer_ServiceDesc is the grpc.ServiceDesc for HandServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HandServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.HandServer",
	HandlerType: (*HandServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckHand",
			Handler:    _HandServer_CheckHand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hand.proto",
}
